import tkinter as tk
from tkinter import messagebox
import random

GRID_SIZE = 9
BOX_SIZE = 3

class Sudoku:
    def __init__(self, difficulty='Medium'):
        self.grid = [[0]*9 for _ in range(9)]
        self.generate_puzzle(difficulty)

    def generate_full_board(self):
        self.grid = [[0]*9 for _ in range(9)]
        self.fill_grid()

    def fill_grid(self):
        num_list = list(range(1, 10))
        for row in range(9):
            for col in range(9):
                if self.grid[row][col] == 0:
                    random.shuffle(num_list)
                    for num in num_list:
                        if self.is_valid(row, col, num):
                            self.grid[row][col] = num
                            if self.solve():
                                return True
                            self.grid[row][col] = 0
                    return False
        return True

    def solve(self):
        for row in range(9):
            for col in range(9):
                if self.grid[row][col] == 0:
                    for num in range(1, 10):
                        if self.is_valid(row, col, num):
                            self.grid[row][col] = num
                            if self.solve():
                                return True
                            self.grid[row][col] = 0
                    return False
        return True

    def is_valid(self, row, col, num):
        for i in range(9):
            if self.grid[row][i] == num or self.grid[i][col] == num:
                return False
        start_row, start_col = row - row % 3, col - col % 3
        for i in range(3):
            for j in range(3):
                if self.grid[start_row + i][start_col + j] == num:
                    return False
        return True

    def generate_puzzle(self, difficulty='Medium'):
        self.generate_full_board()
        self.puzzle = [row[:] for row in self.grid]

        attempts_dict = {
            'Easy': 30,
            'Medium': 40,
            'Hard': 50
        }
        attempts = attempts_dict.get(difficulty, 40)

        while attempts > 0:
            row = random.randint(0, 8)
            col = random.randint(0, 8)
            while self.puzzle[row][col] == 0:
                row = random.randint(0, 8)
                col = random.randint(0, 8)
            self.puzzle[row][col] = 0
            attempts -= 1
        self.grid = [row[:] for row in self.puzzle]

class SudokuGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Sudoku Solver with Levels, Clear, and Input Validation")

        self.entries = [[None for _ in range(9)] for _ in range(9)]
        self.sudoku = Sudoku()
        self.create_widgets()

    def validate_input(self, new_value):
        if new_value == "":
            return True  # allow clearing
        if new_value.isdigit() and 1 <= int(new_value) <= 9:
            return True
        return False

    def create_widgets(self):
        frame = tk.Frame(self.root)
        frame.pack()

        vcmd = self.root.register(self.validate_input)

        for i in range(9):
            for j in range(9):
                border_frame = tk.Frame(
                    frame,
                    highlightbackground="black",
                    highlightthickness=2 if (i % 3 == 0 and i != 0) or (j % 3 == 0 and j != 0) else 1
                )
                border_frame.grid(row=i, column=j, padx=(2 if j % 3 == 0 else 1), pady=(2 if i % 3 == 0 else 1))

                entry = tk.Entry(
                    border_frame, width=2, font=('Arial', 20), justify='center',
                    validate="key", validatecommand=(vcmd, "%P")
                )
                entry.pack(ipadx=5, ipady=5)

                if self.sudoku.puzzle[i][j] != 0:
                    entry.insert(0, str(self.sudoku.puzzle[i][j]))
                    entry.config(state='readonly', disabledforeground='black')

                self.entries[i][j] = entry

        btn_frame = tk.Frame(self.root)
        btn_frame.pack(pady=10)

        solve_btn = tk.Button(btn_frame, text="Solve", command=self.solve)
        solve_btn.grid(row=0, column=0, padx=5)

        clear_btn = tk.Button(btn_frame, text="Clear", command=self.clear_inputs)
        clear_btn.grid(row=0, column=1, padx=5)

        tk.Label(btn_frame, text="New Puzzle:").grid(row=0, column=2, padx=5)

        tk.Button(btn_frame, text="Easy", command=lambda: self.new_puzzle("Easy")).grid(row=0, column=3, padx=5)
        tk.Button(btn_frame, text="Medium", command=lambda: self.new_puzzle("Medium")).grid(row=0, column=4, padx=5)
        tk.Button(btn_frame, text="Hard", command=lambda: self.new_puzzle("Hard")).grid(row=0, column=5, padx=5)

    def get_grid(self):
        for i in range(9):
            for j in range(9):
                val = self.entries[i][j].get()
                if val.isdigit():
                    self.sudoku.grid[i][j] = int(val)
                else:
                    self.sudoku.grid[i][j] = 0

    def fill_grid(self):
        for i in range(9):
            for j in range(9):
                self.entries[i][j].config(state='normal')
                self.entries[i][j].delete(0, tk.END)
                self.entries[i][j].insert(0, str(self.sudoku.grid[i][j]))
                self.entries[i][j].config(state='readonly', disabledforeground='blue')

    def solve(self):
        self.get_grid()
        if self.sudoku.solve():
            self.fill_grid()
        else:
            messagebox.showerror("Error", "No solution exists for the current puzzle.")

    def new_puzzle(self, difficulty):
        self.sudoku = Sudoku(difficulty)
        for i in range(9):
            for j in range(9):
                self.entries[i][j].config(state='normal')
                self.entries[i][j].delete(0, tk.END)
                val = self.sudoku.puzzle[i][j]
                if val != 0:
                    self.entries[i][j].insert(0, str(val))
                    self.entries[i][j].config(state='readonly', disabledforeground='black')

    def clear_inputs(self):
        for i in range(9):
            for j in range(9):
                if self.sudoku.puzzle[i][j] == 0:
                    self.entries[i][j].config(state='normal')
                    self.entries[i][j].delete(0, tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    gui = SudokuGUI(root)
    root.mainloop()
